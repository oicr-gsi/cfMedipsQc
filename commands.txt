## Commands
This section lists commands run by cfMedipsQC workflow

* Running cfMedipsQC

cfMedipsQC is designed to produce several QC metrics using samtools and picard. Runs it's own alignment with bowtie2

Run read trimming with trimmomatic

'''
    set -euo pipefail
    trimmomatic PE  FASTQ_R1 FASTQ_R2 \
                "-phred33 \  (can be set to phred64)
                "FASTQ_R1_BASENAME.R1_paired.fastq.gz" "FASTQ_R1_BASENAME.R1_unpaired.fastq.gz" "FASTQ_R2_BASENAME.R2_paired.fastq.gz" "FASTQ_R2_BASENAME.R2_unpaired.fastq.gz" \
                HEADCROP:5 (how many bases to crop, configurable)
'''

Align with Bowtie2

'''
    set -euo pipefail
    bowtie2 -p 8 -x REFEFENCE_FASTA \
            -1 FASTQ_R1 \
            -2 FASTQ_R2 \
            -S "BASENAME.sam"
'''

Preprocessing: sort and mark duplicates without removing them

'''
    set -euo pipefail
    samtools view -bS SAM_FILE | samtools sort -o "BASENAME.sorted.bam"
    java -jar picard.jar MarkDuplicates \
      I="BASENAME.sorted.bam" \
      O="BASENAME.sorted.dedup.bam" \
      M="BASENAME.sorted.dedup.metrics" \
      ASSUME_SORTED=true \
      VALIDATION_STRINGENCY=SILENT \
      REMOVE_DUPLICATES=false
'''

Collecting metrics using picard tools

''' 
    set -euo pipefail
    java -jar picard.jar CollectMultipleMetrics \
      R=REFERENCE_GENOME\
      I=DEDUPLICATED_BAM \
      O=BASENAME \
      VALIDATION_STRINGENCY=SILENT
    java -jar picard.jar CollectGcBiasMetrics \
      R=REFERENCE_GENOME \
      I=DEDUPLICATED_BAM \
      O="BASENAME.gc_bias_metrics.txt" \
      S="BASENAME.summary_gc_bias_metrics.txt" \
      CHART="BASENAME.gc_bias_metrics.pdf"
    samtools view DEDUPLICATED_BAM | cut -f 3 | sort | uniq -c | sort -nr | sed -e 's/^ *//;s/ /\t/' | awk 'OFS="\t" {print $2,$1}' | sort -n -k1,1 > thalia.counts
    total=$(samtools view DEDUPLICATED_BAM | wc -l)
    if [[ $(cat thalia.counts | grep "^\*" | cut -f2) == "" ]]; then unmap=0; else unmap=$(cat thalia.counts | grep "^\*" | cut -f2); fi
    if [[ $(cat thalia.counts | grep F19K16 | cut -f2) == "" ]]; then methyl=0; else methyl=$(cat thalia.counts | grep F19K16 | cut -f2); fi
    if [[ $(cat thalia.counts | grep F24B22 | cut -f2) == "" ]]; then unmeth=0; else unmeth=$(cat thalia.counts | grep F24B22 | cut -f2); fi
    if [[ $total == "" ]]; then pct_thalia=0; else pct_thalia=$(echo "scale=3; ($methyl + $unmeth)/$total * 100" | bc -l); fi
    if [[ -z $pct_thalia ]]; then pct_thalia="0"; fi
    if [[ $methyl == 0 && $unmeth == 0 ]]; then bet_thalia=0; else bet_thalia=$(echo "scale=3; $methyl/($methyl + $unmeth)" | bc -l); fi 
    if [[ -z $bet_thalia ]]; then bet_thalia="0"; fi
    echo -e "total\tunmap\tmethyl\tunmeth\tPCT_THALIANA\tTHALIANA_BETA" > thalia_summary.txt
    echo -e "$total\t$unmap\t$methyl\t$unmeth\t$pct_thalia\t$bet_thalia" >> thalia_summary.txt

'''

Run Medips R script, calculate coverage metrics

'''
    set -euo pipefail
      medips.R \
        --basedir . \
        --bamfile DEDUPLICATED_BAM \
        --samplename BASENAME \
        --genome BS.GENOME \
        --ws  WINDOW\
        --outdir .
      NAME=""
      count0=$(awk '$1 == 0' genome_count.txt | wc -l)
      count1=$(awk '$1 >= 1' genome_count.txt | wc -l)
      count10=$(awk '$1 >= 10' genome_count.txt | wc -l)
      count50=$(awk '$1 >= 50' genome_count.txt | wc -l)
      count100=$(awk '$1 >= 100' genome_count.txt | wc -l)
      echo -e "sample\tcount0\tcount1\tcount10\tcount50\tcount100" > coverage_windows.txt
      echo -e "$NAME\t$count0\t$count1\t$count10\t$count50\t$count100" >> coverage_windows.txt
      echo -e "samples\n~{basename}" > name.txt
      CONVERT2BED_EXECUTABLE -d --input wig < medips.wig > medips.bed

'''

Prepare json report:

'''
    set -euo pipefail
    txt-to-json.py -n FILE_NAME \
                   -e ENRICHMENT_DATA \
                   -c COVERAGE_DATA \
                   -w COVERAGE_WINDOW \
                   -s SATURATION_DATA \
                   -d DEDUPLICATION_DATA \
                   -u GCBIAS_DATA \
                   -a ALIGNMENT_SUMMARY_DATA \
                   -t TALIA_SUMMARY
'''
